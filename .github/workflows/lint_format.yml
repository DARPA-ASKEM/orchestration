---
# Lint and Format files.
# Currently only linting YAML files but others can be added as needed in the future

name: Lint & Format
on:
  workflow_call:

  push:
    branches: ['main']
  pull_request:
    branches: ['main']

jobs:
  lintYaml:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - name: yaml-lint
        uses: ibiqlik/action-yamllint@2576378a8e339169678f9939646ee3ee325e845c

      - run: echo ${{ steps.yaml-lint.outputs.logfile }}

  lintDocker:
    name: Lint Docker files
    runs-on: ubuntu-22.04
    env:
      HADOLINT_RECURSIVE: true
    steps:
      # 1 - checkout the request
      - uses: actions/checkout@v3

      # 2 - lint all dockerfiles found
      - name: Lint Dockerfiles
        id: hadolint
        uses: hadolint/hadolint-action@f988afea3da57ee48710a9795b6bb677cc901183
        with:
          dockerfile: Dockerfile
          recursive: true
          format: 'json'
      # - name: Lint Dockerfiles
      #   id: hadolint
      #   uses: jbergstroem/hadolint-gh-action@v1
      #   with:
      #     dockerfile: '**/Dockerfile'
      #     output_format: 'json'

      # 3 - if its a pull request update with output
      # - name: Generate PR Message
      #   if: failure() && github.event_name == 'pull_request'
      #   run: |
      #     echo "${{ steps.hadolint.outputs.results }}"
      #     SCRIPT_OUTPUT='#### HadoLint: ${{ steps.hadolint.outcome }}
      #     \`\`\`json
      #     ${{ steps.hadolint.outputs.results }}
      #     \`\`\`
      #     ';
      #     echo "${SCRIPT_OUTPUT}"

      #     # echo "BODY=${TEXT}" >> ${GITHUB_ENV}
      #     echo "SCRIPT_OUTPUT<<EOF" >> $GITHUB_ENV
      #     echo "$SCRIPT_OUTPUT" >> $GITHUB_ENV
      #     echo "EOF" >> $GITHUB_ENV

      # - if: failure() && github.event_name == 'pull_request'
      #   run: |
      #     echo "${{env.SCRIPT_OUTPUT}}"
      #     echo $SCRIPT_OUTPUT

      # - name: Update PR
      #   if: failure() && github.event_name == 'pull_request'
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: ${{env.SCRIPT_OUTPUT}}
      #       })

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: failure() && github.event_name == 'pull_request'
        with:
          script: |
            const output = `
            #### Hadolint: \`${{ steps.hadolint.outcome }}\`
            \`\`\`json
            ${{ steps.hadolint.outputs.results }}
            \`\`\`
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

# Automatically build Docker images on changes to main and push them to the GitHub
# Container Registry using HCL Bake file.
#
# NOTE: Ideally this workflow would be triggered only on pushes to the tag and not
# to main. However due to a current limitation the caching does not work properly
# when trigged on a tag (https://github.com/docker/build-push-action/issues/433). So
# until such time as that is fixed this workflow will build a new image every time
# something is pushed to main. A separate workflow is then triggered on tag pushes
# to automatically re-tag the built image and deploy.

name: Build Docker Images from Bake file

on:
  push:
    branches: ['main']

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}
  BAKE_FILE: docker-bake.hcl
  BAKE_GROUP: prod
  CURRENT_TAG: latest

jobs:
  # Generate a matrix based on all the targets defined in the
  # bake file.
  targets:
    name: Generate targets list from provided bake file
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.targets.outputs.matrix }}
    steps:
      # 1.1 - checkout the files
      - name: Checkout
        uses: actions/checkout@v3

      # 1.2 - Generate a matrix output of all the targets for the specified group
      - name: Create matrix
        id: targets
        run: |
          echo "matrix=$(docker buildx bake ${{ env.BAKE_GROUP }} -f ${{ env.BAKE_FILE }} --print | jq -cr '.group.default.targets')" >> $GITHUB_OUTPUT

      # 1.3 (optional) - output the generated target list for verification
      - name: Show matrix
        run: |
          echo ${{ steps.targets.outputs.matrix }}

  build-push:
    # NOTE: this name is used for waiting on in the retag workflow
    name: build-bake-push
    runs-on: ubuntu-22.04
    permissions:
      packages: write
      contents: read
    # this job depends on the 'targets' job
    needs:
      - targets

    # 2.0 - Build a matrix strategy from the retrieved target list
    strategy:
      fail-fast: true
      matrix:
        target: ${{ fromJson(needs.targets.outputs.matrix) }}

    steps:
      # 2.1 - Checkout the repository
      - name: Checkout the repository
        uses: actions/checkout@v3

      # 2.2 - Set environment variables to be used within the bake file
      # NOTE: this overrides the defaults and should be specific to this deployment
      - name: set env variables for bakefile
        run: |
          echo "VERSION=${{ env.CURRENT_TAG }}" >>${GITHUB_ENV}
          echo "DOCKER_REGISTRY=${{ env.REGISTRY }}" >> ${GITHUB_ENV}
          # Lowercase the owner for docker image naming conventions
          echo "DOCKER_ORG=${OWNER,,}" >> ${GITHUB_ENV}

      # 2.3 - Login against the docker registry
      - name: Login to registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 2.4 - Setup QEMU for platform emulation
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # 2.5 - Setup Docker BuildX for multi platform building
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 2.6 - Build and push Docker Images
      - name: Build Images using BuildX Bake
        uses: docker/bake-action@v2
        with:
          files: ./${{ env.BAKE_FILE }}
          targets: ${{ matrix.target }}
          push: true
          set: |
            *.cache-from=type=gha,scope=build-${{ matrix.target }}
            *.cache-to=type=gha,scope=build-${{ matrix.target }},mode=max
